{"version":3,"sources":["script_old.js"],"names":["getWikiData","phrase","preferedLang","navigator","language","userLanguage","httpAddr","headers","fetch","Headers","append","resp","Error","then","data","error","console","warn","info","code","message","query","search","length","log","pageid","pageId","json","parseData","dataElm","document","querySelector","catch","showData","err","stack","parse","text","anchors","innerHTML","i","test","pathname","port","host","clearData","firstChild","removeChild","validateInput","formInput","replace","searchPhrase","userInput","value","textField","searchRandom","randomBtnElm","addEventListener","inputElm","e","submitBtnElm","key"],"mappings":"aAAA,SAASA,YAAYC,GACnB,IAAMC,EAAeC,UAAUC,UAAYD,UAAUE,aADvDC,EAAAA,WAAAJ,EAAA,oGAA6BD,EAA7B,yCACQC,EAAAA,IAAeC,QACrBI,EAAID,OAAAA,iBAAsBJ,eAC1BM,MAAMD,GAAcE,QAAAA,IACpBF,KAAQG,SAAAA,GACRF,GAAMF,EAAAA,GAAU,OAAEC,EAAAA,OAEd,MAAII,IAAJC,MAAID,kCAASV,EAATU,OAGLE,KAAK,SAAAC,GACJ,GAAIA,EAAKC,MAEP,MADAC,QAAQC,KAAKH,EAAKC,MAAMG,OAChBC,KAAML,EAAKC,MAAMI,KAAMC,QAASN,EAAKC,MAAMG,MAC9C,GAAA,IAAIJ,EAAKO,MAAMC,OAAOC,OAEzB,MADAP,QAAAC,KAAaH,EAAKO,MAAMC,SAChBH,KAAM,aAAcC,QAAAA,wBAAiCnB,GAE/De,QAAQQ,IAARR,UAAsBF,EAAKO,MAAMC,OAAO,GAAGG,QAC3C,IAAMC,EAASZ,EAAKO,MAAMC,OAAUG,GAAAA,OAEpC,OADAnB,EAAAA,WAAsBJ,EAAtBI,4EAAAoB,EAAApB,YACOE,MAAMF,GAAYC,QAAAA,MAI3BM,KAAIF,SAAAA,GACJ,GAAMA,EAAIC,GAAJ,OAAAD,EAAAgB,OAEPd,MAAK,IAAAD,MAAA,uCAAQc,UAEVV,KAAAA,SAAAA,GACA,GAAAF,EAAQK,MAGXN,MALCG,QAGOC,KAAOW,EAAAA,MAAAV,OAEVC,KAAAL,EAAQC,MAAAI,KAAAC,QAAAN,EAAAC,MAAAG,MACNW,OAAUC,UAASC,KAG1BC,KAjCH,SAAAlB,GAAAmB,SAAAnB,EAiCwBC,SAAUI,cAAQ,sBAAvCa,MAAM,SAAAE,GAAA,OAAOlB,QAAQD,MAAMmB,EAAIf,MAAa,IAAMe,EAAId,QAAUc,EAAIC,SAKrE,SAAAP,UAAAd,GACA,GAAAA,EAAAsB,MAAAC,KAGH,OAAAvB,EAAAsB,MAAAC,KAAA,MAAAvB,EAAAsB,MAAAC,KAIC,SAAMC,SAAUR,EAAAA,GADhBD,EAAQU,UAAYzB,EAKlB,IAAA,IAFGwB,EAAWE,SAAIF,iBAAqB,KAEnCE,EAAA,EAAUC,EAAVH,EAAeA,OAAWI,IAE5BJ,UAAWK,KAAXL,EAAAE,GAAAE,YACDJ,EAAAE,GAAAI,KAAA,oBACFN,EAAAE,GAAAG,KAAA,KAOA,SAAAE,UAAAhB,GACF,KAAAA,EAAAiB,YAFGjB,EAAQkB,YAAYlB,EAAQiB,YAO/B,SAAAE,cAAAC,GAED,OAJiBA,EAAUC,QAAQ,6DAA6D,MAO9F,SAAAC,eACA,IAAMC,EAAYJ,SAAAA,cAAwBK,gBAC1CrC,EAAYoC,SAAZrB,cAAA,mBAEA/B,EAAYoD,cAAZE,EAAAD,OACDrC,QAAAQ,IAAA4B,GAFCP,UAAUhB,GAIZ7B,YAASuD,GAKT,SAAMC,gBAINA,IAAAA,aAAaC,SAAiB1B,cAASwB,oBACvCG,aAASD,SAAiB1B,cAAY,oBAChC4B,SAAU7B,SAASC,cAAA,gBAEtB6B,aAAAH,iBAAA,QAAAN,cACAK,aAJHC,iBAAA,QAAAF,cAAAG,SAASD,iBAAiB,WAAY,SAACE,GACvB,UAAVA,EAAEE,KACJV","file":"script_old.js","sourcesContent":["function getWikiData(phrase) {\n  const preferedLang = navigator.language || navigator.userLanguage;\n  let httpAddr = `https://${preferedLang}.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&list=search&continue=&srsearch=${phrase}&srwhat=text&srprop=wordcount&origin=*`;\n  const headers = new Headers();\n  headers.append('Api-User-Agent','Example/1.0');\n  fetch(httpAddr, { headers })\n    .then(resp => {\n      if (resp.ok) return resp.json();\n      throw new Error(`Could not get the Wikipage for ${phrase}!`)\n    })\n    .then(data => {\n      if (data.error) {\n        console.warn(data.error.info);\n        throw { code: data.error.code, message: data.error.info };\n      } else if (data.query.search.length === 0) {\n          console.warn(data.query.search);\n          throw { code: 'NoSuchPage', message: `There is no page for ${phrase}` }\n      } else {\n        console.log(`pageId=${data.query.search[0].pageid}`)\n        const pageId = data.query.search[0].pageid;\n        httpAddr = `https://${preferedLang}.wikipedia.org/w/api.php?action=parse&format=json&formatversion=2&pageid=${pageId}&origin=*`;\n        return fetch(httpAddr, { headers })\n      }\n    })\n    .then(resp => {\n      if (resp.ok) return resp.json();\n      throw new Error(`Error while retrieving page with id ${pageId}`);\n    })\n    .then(data => {\n      if (data.error) {\n        console.warn(data.error.info);\n        throw { code: data.error.code, message: data.error.info };\n      } else return parseData(data)\n    })\n    .then(data => {\n      const dataElm = document.querySelector('.external__data');\n      showData(data, dataElm)\n    })\n    .catch(err => console.error(err.code || '' + ' ' + err.message + err.stack))\n}\n\nfunction parseData(data) {\n  if (data.parse.text) {\n    //let data = data.parse.text['*'];\n    //let re = new RegExp('.*?<a\\shref=\"(.+?)\".*?>(.+?)<.*?', 'g')\n    return data.parse.text['*'] || data.parse.text;\n  }\n}\n\nfunction showData(data, dataElm) {\n  dataElm.innerHTML = data;\n  const anchors = document.querySelectorAll('a');\n\n  for (let i = 0; i < anchors.length; i++) {\n    //console.log(anchors[i]);\n    if (/wiki|w/g.test(anchors[i].pathname)) {\n      anchors[i].host = 'www.wikipedia.org';\n      anchors[i].port = 443;\n    }\n  }\n\n}\n\nfunction clearData(dataElm) {\n  while (dataElm.firstChild) {\n    dataElm.removeChild(dataElm.firstChild);\n  }\n}\n\nfunction validateInput(formInput) {\n  const result = formInput.replace(/([.,;:=+\\[\\]\\\\\\|\\/?<>!@#$%^&*()'\"\\n\\r]*?)([\\w\\s\\t\\r\\n]+)/gi,'$2');\n  return result\n}\n\nfunction searchPhrase() {\n  const textField = document.querySelector('#searchInput');\n  const dataElm = document.querySelector('.external__data');\n  // TODO: some user input validation stuff\n  const userInput = validateInput(textField.value);\n  console.log(userInput);\n  clearData(dataElm);\n  getWikiData(userInput);\n}\n\nfunction searchRandom() {\n\n}\n\nconst submitBtnElm = document.querySelector('#searchBtnSubmit');\nconst randomBtnElm = document.querySelector('#searchBtnRandom');\nconst inputElm = document.querySelector('#searchInput');\n\nsubmitBtnElm.addEventListener('click', searchPhrase)\nrandomBtnElm.addEventListener('click', searchRandom)\ninputElm.addEventListener('keypress', (e) => {\n  if (e.key === 'Enter') {\n    searchPhrase();\n  }\n  })"],"sourceRoot":"/source/"}